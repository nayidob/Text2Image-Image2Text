"""
File: Image2Text.py
----------------
This program takes an image that has been previously modified
by the program Text2Image and extracts the text that contains.
In order to extract the tex the user must load the image and
enter the password generated by Text2Image. Then the decryption
process starts, getting the real value and finding the ASCII
character that corresponds.
The final text is prompted in the Scrolled Text object and the
user is able to save the text as a .txt with a button.
ENJOY!!

by Jonathan Nayid Orozco for Code in Place, Stanford, May 2020
"""
# Importing Libraries
import pathlib
import tkinter
from PIL import Image
from PIL import ImageTk
import tkinter.scrolledtext as st
from tkinter.filedialog import askopenfilename

# Defining Constants
CANVAS_WIDTH = 600      # Width of drawing canvas in pixels
CANVAS_HEIGHT = 600     # Height of drawing canvas in pixels
PUNCTUATION = '.!?,-:;""'
MAX_COLOR = 255
MIN_COLOR = 0


def main():
    # Define main dictionaries to keep useful info through the code
    filename_text_image = {}
    objects_info = {}
    # Set environment - analyze image and decrypt the text within the image
    set_environment(filename_text_image, objects_info)


def set_environment(filename_text_image, objects_info):
    """
    Creates the initial view (Messages, Buttons, Frames, Scroll Text)
    :param filename_text_image: Dictionary used to keep information about text file
    and image provided by the user
    :param objects_info: Dictionary used to keep information about the objects
    (size, strings, etc.)
    """
    # Creates the main canvas
    canvas = make_canvas(CANVAS_WIDTH, CANVAS_HEIGHT, 'Secret Image')
    canvas.rowconfigure(5, minsize=50, weight=1)
    canvas.columnconfigure(4, minsize=50, weight=1)
    # Define a boolean to keep showing this canvas until a button is clicked
    objects_info["show"] = True
    # Welcome and summary Messages
    tkinter.Message(canvas, text="Welcome to the Image2Text Decrypter"
                                 "\n --------------------------",
                    width=600, font="Calibri 24 bold",
                    justify=tkinter.CENTER).grid(row=0, column=1, sticky="new", columnspan=3)
    tkinter.Message(canvas, text="\n"
                                 "\n"
                                 "\n>>> This program extracts text from an image <<<"
                                 "\n"
                                 "\nTo do that, we kindly ask you to select the image file"
                                 " using the button, you can save the decrypted text"
                                 " as a .txt file afterwards"
                                 "\n ", width=200, font="Calibri 12",
                    justify=tkinter.CENTER).grid(row=0, column=0, sticky="ew")
    # Scrolled Text to show the full text loaded
    tkinter.Label(canvas, text="Scroll down to see your full text...",
                  fg="blue").grid(row=2, column=3, sticky="se")
    txt_edit = st.ScrolledText(canvas, font=("Calibri", 15))
    # No Image Selected yet
    image_text = ImageTk.PhotoImage(Image.open("dat/no_image_selected.png"))
    tkinter.Label(canvas, text="^^ Loaded Image ^^", fg="blue").grid(row=3, column=0, sticky="sew")
    image_label = tkinter.Label(canvas, image=image_text)
    # Buttons to Load the Image and save the .txt file by the user
    format_buttons = tkinter.Frame(canvas, relief=tkinter.RAISED, bd=2)
    button_load = tkinter.Button(format_buttons, text="Load Image",
                                 command=lambda: load_image(filename_text_image, image_label))
    button_save = tkinter.Button(format_buttons, text="Save Text",
                                 command=lambda: save_file(objects_info))
    # Enter password required to decrypt
    tkinter.Message(canvas, text="\n"
                                 "\n>>> Enter the Password <<<"
                                 "\n>>> provided by Text2Image <<<",
                    width=300, font="Calibri 15", fg="red",
                    justify=tkinter.CENTER).grid(row=1, column=1, sticky="ew")
    password_entry = tkinter.Entry(canvas)
    password_entry.grid(row=2, column=1)
    # Actionable button to decrypt the image
    button_decrypt = tkinter.Button(canvas, text="Click to DECRYPT",
                                    fg="red", font="Calibri 12 bold",
                                    command=lambda: decrypt(filename_text_image, txt_edit,
                                                            objects_info, password_entry))
    # Positioning of Objects in the canvas
    button_load.grid(row=1, column=0, sticky="ew", padx=5)
    button_save.grid(row=2, column=0, sticky="ew", padx=5, pady=5)
    button_decrypt.grid(row=2, column=2, sticky="nsw", padx=10, pady=10)
    format_buttons.grid(row=1, column=0, sticky="n")
    txt_edit.grid(row=3, column=1, sticky="nsew", rowspan=2, columnspan=4)
    image_label.grid(row=3, column=0, sticky="ew")
    # Validation to update canvas until a button is clicked (Information saved in objects_info dict)
    while objects_info["show"]:
        canvas.update()


def decrypt(filename_text_image, text_edit, objects_info, password_entry):
    """
    This function loads the image and get the text out of it.
    :param filename_text_image: Dictionary used to keep information about text file
    and image provided by the user
    :param text_edit: Scrolled Text Object to load the extracted text
    :param objects_info: Dictionary used to keep information about the objects
    (size, strings, etc.)
    :param password_entry: Password provided by the user
    """
    filename = filename_text_image["image"]
    original = Image.open(filename).convert("RGBA")
    objects_info["text"] = get_text(original, password_entry)
    show_text(text_edit, objects_info["text"])


def get_text(image, password_entry):
    """
    This function goes over evey pixel of the image and converts the
    value in the alpha channel to a character, to do that, it gets the
    password provided by the user and find the correct value.
    :param image: Encrypted Image
    :param password_entry: Password provided by the user
    :return text: string with ALL the characters extracted from the image
    """
    count = 0
    text = ""
    password = 0
    # Get the password from the entry object in the canvas
    if password_entry.get() != '':
        password = int(password_entry.get())
    width, height = image.size
    pixels = image.load()
    # Nested for to go over image pixels
    for x in range(width):
        for y in range(height):
            red, green, blue, alpha = pixels[x, y]
            # decrypt alpha channel
            alpha = (alpha - password) % 256
            # Gets the ASCII equivalent character
            value = int(alpha)
            # Adds the character to the string
            text += chr(value)
            count += 1
    return text


def show_text(txt_edit, text):
    """
    This function loads the text in the scrolled text object in
    the canvas.
    :param txt_edit: Scrolled Text Object in the Canvas
    :param text: String with ALL the characters
    """
    txt_edit.insert(tkinter.END, text)


def save_file(objects_info):
    """
    This function save the text extracted in a .txt file in the
    root folder.
    :param objects_info: Dictionary used to keep information about the objects
    (size, strings, etc.)
    """
    text_file = open("Decrypted_Text.txt", "w+")
    text_file.write(objects_info["text"])
    text_file.close()
    objects_info["show"] = False
    # Shows a confirmation of the successful decryption
    show_confirmation()


def show_confirmation():
    """
    This function shows the confirmation of a successful
    decryption.
    """
    # Creates new canvas as Toplevel, tkinter was showing me error so I needed to create this one
    # differently, I mean, not using the make_canvas function. It seems that a tkinter instance over
    # the same class was not able to load.
    top = tkinter.Toplevel()
    top.title('Decryption done!')
    canvas_text = tkinter.Canvas(top, width=CANVAS_WIDTH // 2, height=CANVAS_HEIGHT // 2)
    canvas_text.pack()
    # Load unlocked symbol
    decrypt_image = Image.open("dat/unlocked.png")
    decrypt_image = ImageTk.PhotoImage(decrypt_image)
    image_label = tkinter.Label(canvas_text, image=decrypt_image, justify=tkinter.CENTER)
    image_label.grid(row=0, column=0, sticky="nsew")
    # Shows in the canvas the path of the generated file
    tkinter.Message(canvas_text, text="\n"
                                      "** Your image has been decrypted"
                                      "\nThe extracted text is in the root directory:"
                                      "\n%s/Decrypted_Text.txt"
                                      % (pathlib.Path().absolute()),
                    width=200, justify=tkinter.CENTER).grid(row=1, column=0, sticky="ew", columnspan=2)
    # Button to exit the whole program
    button_exit = tkinter.Button(canvas_text, text="Click to Exit",
                                 fg="red", font="Calibri 12 bold", command=lambda: exit())
    button_exit.grid(row=4, column=0, sticky="nsew", padx=10, pady=10)
    canvas_text.update()
    canvas_text.mainloop()


def load_image(filename_text_image, image_label):
    """
    The function opens the image that the user wants to load, it will only allow
    .png files.
    :param filename_text_image: Dictionary used to keep information about text file
    and image provided by the user
    :param image_label: Receives the Label from the main canvas and load the image on it.
    """
    filename = askopenfilename(
        filetypes=[("Image Files", "*.png"), ("All Files", "*.*")]
    )
    if not filename:
        return
    new_image = Image.open(filename)
    width_image, height_image = new_image.size
    original_aspect_ratio = height_image / width_image
    # Cause the image could be large, it is resized to show a thumbnail in the main canvas
    new_image = new_image.resize((200, int(200 * original_aspect_ratio)))
    new_image = ImageTk.PhotoImage(new_image)
    # Loads the image in the Label
    image_label.configure(image=new_image)
    image_label.image = new_image
    filename_text_image["image"] = filename


def make_canvas(width, height, title):
    """
    ORIGINAL function provided by Code in Place
    Creates and returns a drawing canvas
    of the given int size ready for drawing.
    """
    top = tkinter.Tk()
    top.minsize(width=width, height=height)
    top.title(title)
    canvas = tkinter.Canvas(top, width=width + 1, height=height + 1)
    canvas.pack()
    return canvas


if __name__ == '__main__':
    main()
